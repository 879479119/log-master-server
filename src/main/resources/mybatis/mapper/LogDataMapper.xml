<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.logmaster.mapper.LogDataMapper">

    <resultMap id="logResultMap" type="com.logmaster.domain.model.LogDataView">
        <id property="id" column="id"/>
        <result column="name" property="" />
        <collection property="versionList" column="id" javaType="ArrayList"
                    ofType="com.logmaster.domain.model.LogAppVersionView" select="getVersionList"/>
    </resultMap>


    <select id="getLogDataList" resultType="com.logmaster.domain.model.LogDataView">
        SELECT
        id,
        name,
        `status` as status,
        platform_id as platformId,
        version_id as versionId,
        type,
        sub_type as subType,
        description,
        create_time as createTime,
        update_time as updateTime
        FROM mine
        <if test="logDataView != null">
            <where>
                <if test="logDataView.name != null and logDataView.name != ''">
                    AND name LIKE '%${logDataView.name}%'
                </if>
                <if test="logDataView.status != null and logDataView.status != ''">
                    AND status = ${logDataView.status}
                </if>
            </where>
        </if>
        order by ${page.orderBy} ${page.orderType} limit ${page.startNum}, ${page.size}
    </select>

    <select id="getVersionList" resultType="com.logmaster.domain.model.LogAppVersionView">
        SELECT
            map.id as platform_id,
            md.name as platform_name,
            mav.id as version_id,
            mav.version_code as version_code
        FROM meta_log_data mld
        INNER JOIN meta_log_version_rela mlvr on mld.id = mlvr.data_id
        INNER JOIN meta_app_vsersion mav on mlvr.version_id = mav.id
        INNER JOIN meta_app_platform map on mav.platform_id = map.id
        INNER JOIN meta_app ma on map.app_id = ma.id
        INNER JOIN meta_dictionary md on map.platform_type_id = md.id
        where mld.id = #{id}
    </select>

    <resultMap id="businessResultMap" type="com.logmaster.domain.model.LogBusinessRelaView">
        <id property="relaId" column="rela_id"/>
        <id property="id" column="id"/>
        <collection property="pageList" column="rela_id" javaType="ArrayList"
                    ofType="com.logmaster.domain.model.Page" select="getPageList"/>

    </resultMap>


    <select id="getBusinessList" resultMap="businessResultMap">
        SELECT
            mlbr.id as rela_id,
            mlbr.business_id as id,
            mb.name as name,
            mlbr.is_collect as _collect,
            mlbr.collect_rule as collect_rule
        FROM meta_log_data mld
        INNER JOIN meta_log_business_rela mlbr on mld.id = mlbr.data_id
        INNER JOIN meta_business mb on mlbr.business_id = mb.id
        where mld.id = #{id}
    </select>

    <select id="getPageList" resultType="com.logmaster.domain.model.Page" parameterType="map">
        SELECT
            mlpr.page_id as id,
            mp.name as name,
            mp.regex regex
        FROM meta_log_data mld
        INNER JOIN meta_log_business_rela mlbr on mld.id = mlbr.data_id
        INNER JOIN meta_log_page_rela mlpr on mlbr.id = mlpr.business_rela_id
        INNER JOIN meta_page mp on mlpr.page_id = mp.id
        where mlbr.id = #{relaId}
    </select>

    <select id="getLogDataNums" resultType="java.lang.Integer" >
        SELECT
          count(DISTINCT id)
        FROM mine
    </select>

    <insert id="addLogData" parameterType="com.logmaster.domain.model.LogDataView" useGeneratedKeys="true" keyProperty="log.id">
        INSERT INTO mine
        (name, platform_id, status, version_id, type, sub_type, description) VALUES
        (
            #{log.name},
            #{log.platformId},
            #{log.status},
            #{log.versionId},
            #{log.type},
            #{log.subType},
            #{log.description}
        )
    </insert>

    <insert id="addColumnData" >
        INSERT INTO `column`
        (name, parent, expression, description, creator) VALUES
        <foreach collection="columns" item="t" separator=",">
        (
            #{t.name},
            #{t.parent},
            #{t.expression},
            #{t.description},
            #{t.creator}
        )
        </foreach>
    </insert>

    <update id="editLogData">
        update
        mine
        <set>
            <if test="logDataView.name != null ">
                name = #{logDataView.name},
            </if>
            <if test="logDataView.status != null ">
                `status` = #{logDataView.status},
            </if>
            <if test="logDataView.platformId != null ">
                platform_id = #{logDataView.platformId},
            </if>
            <if test="logDataView.versionId != null ">
                version_id = #{logDataView.versionId},
            </if>
            <if test="logDataView.type != null ">
                type = #{logDataView.type},
            </if>
            <if test="logDataView.subType != null ">
                sub_type = #{logDataView.subType},
            </if>
            <if test="logDataView.description != null ">
                description = #{logDataView.description},
            </if>
            <if test="logDataView.updateTime != null ">
                update_time = #{logDataView.updateTime},
            </if>
        </set>
        where
        id = #{logDataView.id}
    </update>

    <resultMap id="logDetailResultMap" type="com.logmaster.domain.model.LogDataView">
        <id property="id" column="id"/>
        <collection property="columns" column="id" javaType="ArrayList"
                    ofType="com.logmaster.domain.model.Column" select="getColumnList"/>
    </resultMap>

    <select id="getLogDataView" resultMap="logDetailResultMap">
        SELECT
            id,
            name,
            `status` as status,
            platform_id as platformId,
            version_id as versionId,
            type,
            sub_type as subType,
            description,
            create_time as createTime,
            update_time as updateTime
        FROM mine
        WHERE id = #{id}
    </select>

    <resultMap id="KeyDataMap" type="com.logmaster.domain.model.LogKeyDataView">
        <result column="default_value" property="defaultValue"
                typeHandler="com.logmaster.handler.ListTypeHandler"/>
    </resultMap>

    <select id="getColumnList" resultType="com.logmaster.domain.model.Column">
        SELECT
            id,
            name,
            parent,
            expression,
            creator,
            description,
            create_time as createTime,
            update_time as updateTime
        FROM `column`
        WHERE parent = #{id}
    </select>


    <delete id="delColumnData">
        DELETE
        from  `column`
        where parent = #{id}
    </delete>
</mapper>